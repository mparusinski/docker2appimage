#!/usr/bin/env bash
# vim: noai:ts=4:sw=4:expandtab
#
# docker2appimage: A command-line utility to convert docker images to appimages written in bash
# https://github.com/mparusinski/docker2appimage
# 
# The MIT License (MIT)
#
# Copyright (c) 2022 Michal Parusinski
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

version=0.0.0 # Still ongoing development
application="docker2appimage"

check_imagemagick () {
    if ! command -v convert &> /dev/null
    then
        echo "ERROR: convert (imagemagick) is required by $application"
        exit 1;
    fi
}

check_appimagetool () {
    if ! command -v appimagetool-x86_64.AppImage &> /dev/null
    then
        echo "ERROR: appimagetool is required by $application"
        echo "ERROR: appimagetool can be downloaded from https://appimage.github.io/appimagetool/"
        exit 1;
    fi
}

check_requirements() {
    check_imagemagick
    check_appimagetool
}

usage () { printf "%s" "\
Usage: $application [OPTION] container

$application is a CLI tool to convert docker images to AppImage format

Options:
    -h, --help           Print this text and exit
        --version        Show docker2appimage version
    -v, --verbose        Verbose mode (TODO)
    -i, --from-image     Use an image instead of a container
    -x, --command=CMD    Use custom command from the docker image
    -n, --name=NAME      Use custom name for AppImage

DEVELOPER:
        --noclean        Do not clean Appimage artifacts
        --xtrace         Use xtrace in AppRun script

Report bugs to https://github.com/mparusinski/docker2appimage/issues
"
exit 2
}

version_then_exit() { printf "%s" "\
$application $version
"
exit 1
}

fetch_exec () {
    object_type=$1  # Either image or container
    object=$2
    if [ -z ${COMMAND+x} ]; then
        exec=$(docker $object_type inspect --format='{{.Config.Cmd}}' "$object" | sed -E 's/\[(.*)\]/\1/gm;t;d')
        case $exec in
            /*)
                normexec=$(echo "$exec" | sed 's/^\///')
                ;;
            sh)
                echo "ERROR: Docker image/container with shell script is not supported"
                exit 1
                ;;
            *)
                echo "Unsupported case $exec"
                exit 1
                ;;
        esac
    else
        normexec=$COMMAND
    fi
    echo "$normexec"
}

write_AppRun () {
    if [ -z ${XTRACE+x} ]; then
        cat << 'EOF' > "$appdir"/AppRun
#!/bin/sh

SELF=$(readlink -f "$0")
HERE=${SELF%/}
HERE=$(dirname ${HERE})
export PATH="${HERE}:${HERE}/usr/bin/:${HERE}/usr/sbin/:${HERE}/usr/games/:${HERE}/bin/:${HERE}/sbin/${PATH:+:$PATH}"
export LD_LIBRARY_PATH="${HERE}/usr/lib/:${HERE}/usr/lib/i386-linux-gnu/:${HERE}/usr/lib/x86_64-linux-gnu/:${HERE}/usr/lib32/:${HERE}/usr/lib64/:${HERE}/lib/:${HERE}/lib/i386-linux-gnu/:${HERE}/lib/x86_64-linux-gnu/:${HERE}/lib32/:${HERE}/lib64/${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"
export XDG_DATA_DIRS="${HERE}/usr/share/${XDG_DATA_DIRS:+:$XDG_DATA_DIRS}"
EXEC=$(grep -e '^Exec=.*' "${HERE}"/*.desktop | head -n 1 | cut -d "=" -f 2 | cut -d " " -f 1)
exec "${EXEC}" "$@"
EOF
    else
        cat << 'EOF' > "$appdir"/AppRun
#!/bin/sh

set -x
SELF=$(readlink -f "$0")
HERE=${SELF%/}
HERE=$(dirname ${HERE})
export PATH="${HERE}:${HERE}/usr/bin/:${HERE}/usr/sbin/:${HERE}/usr/games/:${HERE}/bin/:${HERE}/sbin/${PATH:+:$PATH}"
export LD_LIBRARY_PATH="${HERE}/usr/lib/:${HERE}/usr/lib/i386-linux-gnu/:${HERE}/usr/lib/x86_64-linux-gnu/:${HERE}/usr/lib32/:${HERE}/usr/lib64/:${HERE}/lib/:${HERE}/lib/i386-linux-gnu/:${HERE}/lib/x86_64-linux-gnu/:${HERE}/lib32/:${HERE}/lib64/${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"
export XDG_DATA_DIRS="${HERE}/usr/share/${XDG_DATA_DIRS:+:$XDG_DATA_DIRS}"
EXEC=$(grep -e '^Exec=.*' "${HERE}"/*.desktop | head -n 1 | cut -d "=" -f 2 | cut -d " " -f 1)
exec "${EXEC}" "$@"
set +x
EOF
    fi
}

PARSED_ARGUMENTS=$(getopt -a -n $application -o hvix:n: --long help,version,verbose,from-image,command:,name:,noclean,xtrace -- $@)
VALID_ARGUMENTS=$?
if [ "$VALID_ARGUMENTS" != "0" ]; then
    usage
fi

eval set -- "$PARSED_ARGUMENTS"
while :
do 
    case $1 in
        -h | --help)       usage;                  shift       ;;
        --version)         version_then_exit;      shift       ;;
        -v | --verbose)    VERBOSE=1;              shift       ;;
        -i | --from-image) IMAGE=1;                shift       ;;
        -x | --command)    COMMAND=$2;             shift 2     ;;
        -n | --name)       NAME=$2;                shift 2     ;;
        --noclean)         NOCLEAN=1;              shift       ;;
        --xtrace)          XTRACE=1;               shift       ;;
        --)                                     shift;  break;;
        *) echo "Unexpected option: $1"
           usage ;;
   esac
done

if [ "$#" -lt 1 ]; then
    echo "$application: missing parameter image"
    usage
fi

check_requirements

docker_object=$1
# We need to handle images with / in the name
# hence we modify these
normed_docker_object=${docker_object/\//_}

tarball=$normed_docker_object.tar
appdir=$normed_docker_object.AppDir

if [ -z ${IMAGE+x} ]; 
then
    container_id=$docker_object
    if [ $( docker ps -a --format "{{.Names}}" | grep "$container_id" | wc -l) -gt 0 ];
    then
        docker export "$docker_object" > "$tarball"
    else
        echo "ERROR: Docker container $container_id does not exist"
        exit 1
    fi
else
    container_id=$(docker container create "$docker_object")
    docker export "$container_id" > "$tarball"
fi

mkdir -p "$appdir"
tar -xf "$tarball" -C "$appdir"

if [ -n "$NAME" ]; then
    mv "$appdir" "$NAME.AppDir"
    appdir=$NAME.AppDir
else
    NAME=$normed_docker_object
fi

write_AppRun

normexec=$(fetch_exec container $container_id)

chmod +x "$appdir"/"AppRun"

cat << EOF > "$appdir"/"$normed_docker_object".desktop
[Desktop Entry]
Name=$NAME
Exec=$normexec
Icon=$NAME
Type=Application
Categories=Utility;
EOF

convert -size 256x256 xc:white "$appdir"/"$NAME".png

appimagetool-x86_64.AppImage "$appdir"

# Cleaning build artifcats, unless requested to be kept
if [ -z ${NOCLEAN+x} ]; then
    rm -rf "$appdir"
    rm "$tarball"
fi
