#!/usr/bin/env bash
# vim: noai:ts=4:sw=4:expandtab
#
# docker2appimage: A command-line utility to convert docker images to appimages written in bash
# https://github.com/mparusinski/docker2appimage
# 
# The MIT License (MIT)
#
# Copyright (c) 2022 Michal Parusinski
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

image=$1
tarball=$image.tar
appdir=$image.AppDir

container_id=$(docker container create $image)
docker export $container_id > $tarball
mkdir -p $appdir
tar -xf $tarball -C $appdir

cat << 'EOF' > $appdir/AppRun
#!/bin/sh

SELF=$(readlink -f "$0")
HERE=${SELF%/}
HERE=$(dirname ${HERE})
export PATH="${HERE}:${HERE}/usr/bin/:${HERE}/usr/sbin/:${HERE}/usr/games/:${HERE}/bin/:${HERE}/sbin/${PATH:+:$PATH}"
export LD_LIBRARY_PATH="${HERE}/usr/lib/:${HERE}/usr/lib/i386-linux-gnu/:${HERE}/usr/lib/x86_64-linux-gnu/:${HERE}/usr/lib32/:${HERE}/usr/lib64/:${HERE}/lib/:${HERE}/lib/i386-linux-gnu/:${HERE}/lib/x86_64-linux-gnu/:${HERE}/lib32/:${HERE}/lib64/${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"
export XDG_DATA_DIRS="${HERE}/usr/share/${XDG_DATA_DIRS:+:$XDG_DATA_DIRS}"
EXEC=$(grep -e '^Exec=.*' "${HERE}"/*.desktop | head -n 1 | cut -d "=" -f 2 | cut -d " " -f 1)
exec "${EXEC}" "$@"
EOF

exec=$(docker image inspect --format='{{.Config.Cmd}}' $image | sed -E 's/\[(.*)\]/\1/gm;t;d')
case $exec in
    /*)
        normexec=$(echo $exec | sed 's/^\///')
        ;;
    *)
        echo "Unsupported case $exec"
        exit 1
        ;;
esac

chmod +x $appdir/AppRun

# TODO: Find the right executable
cat << EOF > $appdir/$image.desktop
[Desktop Entry]
Name=$image
Exec=$normexec
Icon=$image
Type=Application
Categories=Utility;
EOF

convert -size 256x256 xc:white $appdir/$image.png
